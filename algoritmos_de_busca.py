# -*- coding: utf-8 -*-
"""Algoritmos de busca

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zTLIPEX6mHlWKE0EHjuKuqQb9EvDtVeS
"""

#Grafo
class Vertice:
  def __init__(self,rotulo,distancia_objetivo):
    self.rotulo = rotulo
    self.visitado = False
    self.distancia_objetivo = distancia_objetivo
    self.adjacentes = []

  def adiciona_adjcente(self,adjacente):
    self.adjacentes.append(adjacente)

  def mostra_adjacentes(self):
    for i in self.adjacentes:
      print(i.vertice.rotulo,i.custo)

class Adjacente:
  def __init__(self,vertice,custo):
    self.vertice = vertice
    self.custo = custo
    self.distancia_aestrela = vertice.distancia_objetivo + self.custo

class Grafo:
  arad = Vertice('Arad',366)
  zerind = Vertice('Zerind',374)
  oradea = Vertice('Oradea',380)
  sibiu = Vertice('Sibiu',253)
  timisoara = Vertice('Timisoara',329)
  lugoj = Vertice('Lugoj',244)
  mehadia = Vertice('Mehadia',241)
  dobreta = Vertice('Dobreta',242)
  craiova = Vertice('Craiova',160)
  rimnicu = Vertice('Rimnicu',193)
  fagaras = Vertice('Fagaras',178)
  pitesti = Vertice('Pitesti',98)
  bucharest = Vertice('Bucharest',0)
  giurgiu = Vertice('Giurgiu',77)

  arad.adiciona_adjcente(Adjacente(zerind,75))
  arad.adiciona_adjcente(Adjacente(sibiu,140))
  arad.adiciona_adjcente(Adjacente(timisoara,118))

  zerind.adiciona_adjcente(Adjacente(arad,75))
  zerind.adiciona_adjcente(Adjacente(sibiu,71))
  
  oradea.adiciona_adjcente(Adjacente(zerind,71))
  oradea.adiciona_adjcente(Adjacente(sibiu,175))

  sibiu.adiciona_adjcente(Adjacente(oradea,151))
  sibiu.adiciona_adjcente(Adjacente(arad,140))
  sibiu.adiciona_adjcente(Adjacente(fagaras,99))
  sibiu.adiciona_adjcente(Adjacente(rimnicu,80))

  timisoara.adiciona_adjcente(Adjacente(arad,118))
  timisoara.adiciona_adjcente(Adjacente(lugoj,111))

  lugoj.adiciona_adjcente(Adjacente(timisoara,111))
  lugoj.adiciona_adjcente(Adjacente(mehadia,70))

  mehadia.adiciona_adjcente(Adjacente(lugoj,70))
  mehadia.adiciona_adjcente(Adjacente(dobreta,75))

  dobreta.adiciona_adjcente(Adjacente(mehadia,75))
  dobreta.adiciona_adjcente(Adjacente(craiova,120))

  craiova.adiciona_adjcente(Adjacente(dobreta,120))
  craiova.adiciona_adjcente(Adjacente(pitesti,138))
  craiova.adiciona_adjcente(Adjacente(rimnicu,146))

  rimnicu.adiciona_adjcente(Adjacente(craiova,146))
  rimnicu.adiciona_adjcente(Adjacente(sibiu,80))
  rimnicu.adiciona_adjcente(Adjacente(pitesti,97))

  fagaras.adiciona_adjcente(Adjacente(sibiu,99))
  fagaras.adiciona_adjcente(Adjacente(bucharest,211))

  pitesti.adiciona_adjcente(Adjacente(rimnicu,97))
  pitesti.adiciona_adjcente(Adjacente(craiova,138))
  pitesti.adiciona_adjcente(Adjacente(bucharest,101))

  bucharest.adiciona_adjcente(Adjacente(fagaras,151))
  bucharest.adiciona_adjcente(Adjacente(pitesti,151))
  bucharest.adiciona_adjcente(Adjacente(giurgiu,151))

grafo = Grafo()

import numpy as np
class vetorOrdenado:
  def __init__(self,capacidade):
    self.capacidade = capacidade
    self.ultima_posicao = -1
    # mudança no tipo de dados
    self.valores = np.empty(self.capacidade,dtype=object)

    # Referência para o vértice e comparação com a distância para o objetivo
  def insere(self,adjacente):

    if self.ultima_posicao == self.capacidade - 1:
      print('Capacidade maxima atingida')
      return
    posicao= 0
    for i in range(self.ultima_posicao + 1):
      posicao=i
      if self.valores[i].distancia_aestrela > adjacente.distancia_aestrela:
        break
      if i == self.ultima_posicao:
        posicao = i + 1
    x = self.ultima_posicao
    while x >= posicao:
      self.valores[x+1] = self.valores[x]
      x -= 1

    self.valores[posicao] = adjacente
    self.ultima_posicao += 1

  def imprime(self):
    if self.ultima_posicao == -1:
      print('O vetor está vazio')
    else:
      for i in range(self.ultima_posicao + 1):
        print(i, '-' ,self.valores[i].vertice.rotulo,'-',
              self.valores[i].custo,'-',self.valores[i].vertice.distancia_objetivo,'-',
              self.valores[i].distancia_aestrela)

vetor = vetorOrdenado(5)
vetor.insere(grafo.arad)
vetor.insere(grafo.dobreta)
vetor.insere(grafo.bucharest)
vetor.insere(grafo.pitesti)

vetor = vetorOrdenado(3)
vetor.insere(grafo.arad.adjacentes[0])
vetor.insere(grafo.arad.adjacentes[1])
vetor.insere(grafo.arad.adjacentes[2])

vetor.imprime()

class Gulosa:

  def __init__(self,objetivo):
    self.objetivo = objetivo
    self.encontrado = False

  def buscar(self,atual):
    print('---------')
    print('Atual: {}'.format(atual.rotulo))
    self.visitado = True

    if atual == self.objetivo:
      self.encontrado = True
    else:
      vetor_ordenado = vetorOrdenado(len(atual.adjacentes))
      for adjacente in atual.adjacentes:
        if adjacente.vertice.visitado == False:
          adjacente.vertice.visitado == True
          vetor_ordenado.insere(adjacente.vertice)
      vetor_ordenado.imprime()

      if vetor_ordenado.valores[0] != None:
        self.buscar(vetor_ordenado.valores[0])

# busca_gulosa = Gulosa(grafo.bucharest)
# busca_gulosa.buscar(grafo.arad)

class AEstrela:
  def __init__(self,objetivo):
    self.objetivo = objetivo
    self.encontrado = False

  def buscar(self,atual):
    print('----------')
    print('Atual: {}'.format(atual.rotulo))
    atual.visitado = True

    if atual == self.objetivo:
      self.encontrado = True
    else:
      vetor_ordenado = vetorOrdenado(len(atual.adjacentes))

      for adjacente in atual.adjacentes:
        if adjacente.vertice.visitado == False:
          adjacente.vertice.visitado == True
          vetor_ordenado.insere(adjacente)
      vetor_ordenado.imprime()

      if vetor_ordenado.valores[0] != None:
        self.buscar(vetor_ordenado.valores[0].vertice)

busca_aestrela = AEstrela(grafo.bucharest)
busca_aestrela.buscar(grafo.arad)

