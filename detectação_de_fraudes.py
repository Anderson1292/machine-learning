# -*- coding: utf-8 -*-
"""Detectação de fraudes

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ofn6iDWCwqrPmHqPet4PKkXG8JHupqqq
"""

!pip install minisom

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from minisom import MiniSom
from pylab import pcolor,colorbar,plot

base = pd.read_csv('credit_data.csv')
base.isnull().sum()

base = base.dropna()

base.head()

base.loc[base.age < 0,'age'] = 40.80

X = base.iloc[:,0:4].values
y = base.iloc[:,4].values

normalized = MinMaxScaler(feature_range=(0,1))
X = normalized.fit_transform(X)

mini = MiniSom(x = 15,y = 15,input_len=4,random_seed=0)
mini.random_weights_init(X)
mini.train_random(data = X,num_iteration=100)

markers = ['o','s']
colors = ['r','g']

pcolor(mini.distance_map().T)
colorbar()
for i,x in enumerate(X):
  w = mini.winner(x)
  plot(w[0] + 0.5,w[1] + 0.5,markers[y[i]],markerfacecolor='None',
       markersize=10,markeredgecolor=colors[y[i]],markeredgewidth=2)

mapping = mini.win_map(X)
suspect = np.concatenate((mapping[(4,5)],mapping[(6,13)]),axis=0)

suspect = normalized.inverse_transform(suspect)

classes = []
for i in range(len(base)):
  for j in range(len(suspect)):
    if base.iloc[i,0] == int(round(suspect[j,0])):
      classes.append(base.iloc[:,4])

classes = np.asarray(classes)

final_suspect = np.column_stack((suspect,classes))

final_suspect = final_suspect[final_suspect[:,4].argsort()]

final_suspect